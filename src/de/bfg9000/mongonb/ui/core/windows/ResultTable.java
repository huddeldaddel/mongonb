package de.bfg9000.mongonb.ui.core.windows;

import com.mongodb.DBObject;
import de.bfg9000.mongonb.core.Collection;
import java.util.LinkedList;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableColumn;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

/**
 * UI components that encapsulates the result table and its navigation components.
 *
 * @author thomaswerner35
 */
class ResultTable extends javax.swing.JPanel {

    @Getter @Setter private String name;
    @Getter @Setter private Collection collection;
    private DataCache dataCache;

    /**
     * Creates new form ResultTable
     */
    public ResultTable() {
        initComponents();

        tblData.setComponentFactory(new ComponentFactory());
        tblData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!e.getValueIsAdjusting())
                    tblData.setComponentPopupMenu(new TableContextMenuFactory().buildContextMenu(getSelectedItems()));
            }
            private java.util.Collection<DBObject> getSelectedItems() {
                if(-1 == tblData.getSelectedRow())
                    return null;

                final java.util.Collection<DBObject> result = new LinkedList<DBObject>();
                for(int index: tblData.getSelectedRows())
                    result.add(dataCache.getContent().get(index));
                return result;
            }
        });
    }

    int getPageSize() {
        return Integer.parseInt(txtPageSize.getText());
    }

    void updateTable(DataCache dataCache, boolean isReloadable) {
        this.dataCache = dataCache;

        tblData.setModel(new ResultTableModel(dataCache));
        for(int row=0; row<dataCache.getContent().size(); row++)
            tblData.refreshRow(row);
        if(0 < tblData.getColumnCount()) {
            final TableColumn column = tblData.getColumnModel().getColumn(0);
            column.setMaxWidth(60);
            column.setMinWidth(60);
            column.setPreferredWidth(60);
        }

        btnReload.setEnabled(isReloadable);
        btnGoFirst.setEnabled(dataCache.canMoveReverse());
        btnGoPrevious.setEnabled(dataCache.canMoveReverse());
        btnGoNext.setEnabled(dataCache.canMoveForward());
        btnGoLast.setEnabled(dataCache.canMoveForward());
        lblTotalRows.setText(Integer.toString(dataCache.getCount()));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbDataNavigation = new javax.swing.JToolBar();
        btnReload = new javax.swing.JButton();
        btnGoFirst = new javax.swing.JButton();
        btnGoPrevious = new javax.swing.JButton();
        btnGoNext = new javax.swing.JButton();
        btnGoLast = new javax.swing.JButton();
        lblPageSize = new javax.swing.JLabel();
        txtPageSize = new javax.swing.JTextField();
        lblTotalRowsInfo = new javax.swing.JLabel();
        lblTotalRows = new javax.swing.JLabel();
        scrData = new javax.swing.JScrollPane();
        tblData = new com.jidesoft.grid.HierarchicalTable();

        setLayout(new java.awt.BorderLayout());

        tbDataNavigation.setRollover(true);

        btnReload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bfg9000/mongonb/ui/core/images/view-refresh.png"))); // NOI18N
        btnReload.setToolTipText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.btnReload.toolTipText")); // NOI18N
        btnReload.setEnabled(false);
        btnReload.setFocusable(false);
        btnReload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnReload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnReload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadActionPerformed(evt);
            }
        });
        tbDataNavigation.add(btnReload);

        btnGoFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bfg9000/mongonb/ui/core/images/go-first.png"))); // NOI18N
        btnGoFirst.setToolTipText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.btnGoFirst.toolTipText")); // NOI18N
        btnGoFirst.setEnabled(false);
        btnGoFirst.setFocusable(false);
        btnGoFirst.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoFirst.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoFirstActionPerformed(evt);
            }
        });
        tbDataNavigation.add(btnGoFirst);

        btnGoPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bfg9000/mongonb/ui/core/images/go-previous.png"))); // NOI18N
        btnGoPrevious.setToolTipText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.btnGoPrevious.toolTipText")); // NOI18N
        btnGoPrevious.setEnabled(false);
        btnGoPrevious.setFocusable(false);
        btnGoPrevious.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoPrevious.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoPreviousActionPerformed(evt);
            }
        });
        tbDataNavigation.add(btnGoPrevious);

        btnGoNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bfg9000/mongonb/ui/core/images/go-next.png"))); // NOI18N
        btnGoNext.setToolTipText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.btnGoNext.toolTipText")); // NOI18N
        btnGoNext.setEnabled(false);
        btnGoNext.setFocusable(false);
        btnGoNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoNext.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoNextActionPerformed(evt);
            }
        });
        tbDataNavigation.add(btnGoNext);

        btnGoLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/bfg9000/mongonb/ui/core/images/go-last.png"))); // NOI18N
        btnGoLast.setToolTipText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.btnGoLast.toolTipText")); // NOI18N
        btnGoLast.setEnabled(false);
        btnGoLast.setFocusable(false);
        btnGoLast.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGoLast.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGoLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoLastActionPerformed(evt);
            }
        });
        tbDataNavigation.add(btnGoLast);

        lblPageSize.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(lblPageSize, org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.lblPageSize.text")); // NOI18N
        lblPageSize.setPreferredSize(new java.awt.Dimension(65, 16));
        tbDataNavigation.add(lblPageSize);

        txtPageSize.setText(org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.txtPageSize.text")); // NOI18N
        txtPageSize.setMaximumSize(new java.awt.Dimension(30, 28));
        txtPageSize.setPreferredSize(new java.awt.Dimension(30, 28));
        tbDataNavigation.add(txtPageSize);

        lblTotalRowsInfo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(lblTotalRowsInfo, org.openide.util.NbBundle.getMessage(ResultTable.class, "ResultTable.lblTotalRowsInfo.text")); // NOI18N
        lblTotalRowsInfo.setPreferredSize(new java.awt.Dimension(80, 16));
        tbDataNavigation.add(lblTotalRowsInfo);
        tbDataNavigation.add(lblTotalRows);

        add(tbDataNavigation, java.awt.BorderLayout.NORTH);

        scrData.setViewportView(tblData);

        add(scrData, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnReloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadActionPerformed
        if(null != dataCache.queryResult.getExecutor())
            dataCache.queryResult.getExecutor().execute();
    }//GEN-LAST:event_btnReloadActionPerformed

    private void btnGoFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoFirstActionPerformed
        new NavigationWorker(new Runnable() {
            @Override
            public void run() {
                dataCache.moveFirst();
            }
        }).execute();
    }//GEN-LAST:event_btnGoFirstActionPerformed

    private void btnGoPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoPreviousActionPerformed
        new NavigationWorker(new Runnable() {
            @Override
            public void run() {
                dataCache.moveReverse();
            }
        }).execute();
    }//GEN-LAST:event_btnGoPreviousActionPerformed

    private void btnGoNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoNextActionPerformed
        new NavigationWorker(new Runnable() {
            @Override
            public void run() {
                dataCache.moveForward();
            }
        }).execute();
    }//GEN-LAST:event_btnGoNextActionPerformed

    private void btnGoLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoLastActionPerformed
        new NavigationWorker(new Runnable() {
            @Override
            public void run() {
                dataCache.moveLast();
            }
        }).execute();
    }//GEN-LAST:event_btnGoLastActionPerformed

    /**
     * Loads missing data asynchronously, then updates the UI.
     */
    @AllArgsConstructor
    private final class NavigationWorker extends SwingWorker<Void, Void> {

        private final Runnable task;

        @Override
        protected Void doInBackground() throws Exception {
            task.run();
            return null;
        }

        @Override
        protected void done() {
            updateTable(dataCache, btnReload.isEnabled());
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoFirst;
    private javax.swing.JButton btnGoLast;
    private javax.swing.JButton btnGoNext;
    private javax.swing.JButton btnGoPrevious;
    private javax.swing.JButton btnReload;
    private javax.swing.JLabel lblPageSize;
    private javax.swing.JLabel lblTotalRows;
    private javax.swing.JLabel lblTotalRowsInfo;
    private javax.swing.JScrollPane scrData;
    private javax.swing.JToolBar tbDataNavigation;
    private com.jidesoft.grid.HierarchicalTable tblData;
    private javax.swing.JTextField txtPageSize;
    // End of variables declaration//GEN-END:variables

}
