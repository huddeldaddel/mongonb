package de.bfg9000.mongonb.ui.core.dialogs;

import de.bfg9000.mongonb.core.Connection;
import de.bfg9000.mongonb.core.ConnectionManager;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ResourceBundle;
import javax.swing.SwingWorker;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.netbeans.api.progress.ProgressHandle;
import org.netbeans.api.progress.ProgressHandleFactory;
import org.openide.windows.WindowManager;
import org.openide.util.NbBundle;

/**
 * This dialog can be used to create, display or edit {@code Connection}s.
 * 
 * @author wernert
 */
public class ConnectionEditorDialog extends javax.swing.JDialog {    
    
    private static final ResourceBundle bundle = NbBundle.getBundle(ConnectionEditorDialog.class);
    
    final UpdateHandler updateHandler = new UpdateHandler();
    
    @Getter private Connection connection;
    private boolean newConnection;
    private boolean dialogResult;
    
    
    /**
     * Creates new form ConnectionEditor
     */
    public ConnectionEditorDialog() {
        super(WindowManager.getDefault().getMainWindow(), 
              bundle.getString("ConnectionEditor.title"), true);
        
        initComponents();
        lblMessage.setText("");
            
        txtName.getDocument().addDocumentListener(updateHandler);
        txtHost.getDocument().addDocumentListener(updateHandler);
        txtPort.getDocument().addDocumentListener(updateHandler);
    }    
            
    public boolean execute() {
        return execute(true, new Connection());        
    }
    
    public boolean execute(Connection connection) {
        return execute(false, connection.clone());        
    }    
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblHost = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        lblMessage = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnTest = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(lblName, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.lblName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblHost, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.lblHost.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblPort, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.lblPort.text")); // NOI18N

        lblMessage.setForeground(new java.awt.Color(255, 0, 0));
        org.openide.awt.Mnemonics.setLocalizedText(lblMessage, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.lblMessage.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(lblHost)
                            .addComponent(lblPort))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                            .addComponent(txtHost)
                            .addComponent(txtPort)))
                    .addComponent(lblMessage))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHost)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPort)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMessage)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        org.openide.awt.Mnemonics.setLocalizedText(btnOK, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.btnOK.text")); // NOI18N
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });
        jPanel3.add(btnOK);

        org.openide.awt.Mnemonics.setLocalizedText(btnCancel, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.btnCancel.text")); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancel);

        jPanel1.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(btnTest, org.openide.util.NbBundle.getMessage(ConnectionEditorDialog.class, "ConnectionEditorDialog.btnTest.text")); // NOI18N
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });
        jPanel4.add(btnTest);

        jPanel1.add(jPanel4, java.awt.BorderLayout.WEST);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dialogResult = false;
        setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        testConnection();
    }//GEN-LAST:event_btnTestActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnTest;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblHost;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPort;
    private javax.swing.JTextField txtHost;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    private void testConnection() {
        new ConnectionTest(connection.clone()).execute();
    }

    private boolean execute(boolean isNew, Connection con) {        
        dialogResult = false;
        newConnection = isNew;
        connection = con;        
        
        updateHandler.setActive(false);
        txtName.setText(con.getName());
        txtHost.setText(con.getHost());
        txtPort.setText(null == con.getPort() ? "" : Integer.toString(con.getPort()));
        updateHandler.setActive(true);
        
        validateConnection();
        txtName.requestFocusInWindow();
        
        final Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
        final Dimension dialog = new Dimension(450, 190);
        setBounds((screen.width -dialog.width) /2, (screen.height -dialog.height) /2, dialog.width, dialog.height);
        setVisible(true);
        return dialogResult;
    }
    
    private void updateConnection() {
        connection.setHost(txtHost.getText().trim());
        connection.setName(txtName.getText().trim());
        try {
            connection.setPort(Integer.parseInt(txtPort.getText().trim()));
        } catch(NumberFormatException nfe) {
            connection.setPort(null);
        }
    }
       
    private void validateConnection() {
        dialogResult = true;        
        lblMessage.setForeground(Color.RED);
        lblMessage.setText("");
        if((null == connection.getName()) || connection.getName().isEmpty()) {
            lblMessage.setText(bundle.getString("ConnectionEditor.nameEmpty"));                
            dialogResult = false;
        }
        if(dialogResult && newConnection)            
            for(Connection c: ConnectionManager.INSTANCE.getConnections()) 
                if(connection.getName().equals(c.getName())) {    
                    lblMessage.setText(bundle.getString("ConnectionEditor.nameClash"));                
                    dialogResult = false;
                    break;
                }
        if(dialogResult && ((null == connection.getHost()) || connection.getHost().isEmpty())) {
            lblMessage.setText(bundle.getString("ConnectionEditor.hostEmpty"));                
            dialogResult = false;
        }        
        if(dialogResult && (null == connection.getPort())) {
            lblMessage.setText(bundle.getString("ConnectionEditor.portEmpty"));                
            dialogResult = false;
        }        
        btnOK.setEnabled(dialogResult);
        btnTest.setEnabled(dialogResult);
    }
    
    /**
     * Will be registered as {@code DocumentListener} on the input fields of the dialog. Causes the update of the
     * {@code Connection} and it's validation.
     */
    private final class UpdateHandler implements DocumentListener {
        
        @Getter @Setter private boolean active;
        
        private void anyUpdate() {
            if(active) {
                updateConnection();
                validateConnection();
            }
        }
        
        @Override
        public void insertUpdate(DocumentEvent e) {
            anyUpdate();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            anyUpdate();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            anyUpdate();
        }
        
    }
    
    /**
     * Performs the connection test asynchronously and updates the error message label.
     */
    @AllArgsConstructor
    private final class ConnectionTest extends SwingWorker<String, Void> {

        private static final String OK = "OK";
        
        private final ProgressHandle p = ProgressHandleFactory.createHandle(bundle.getString("ConnectionEditor.test"));
        private final Connection connection;
        
        
        @Override
        protected String doInBackground() throws Exception {            
            p.start();
            try {
                return connection.connect() ? OK : bundle.getString("ConnectionEditor.networkError");                
            } finally {
                connection.disconnect();
            }            
        }
        
        @Override
        protected void done() {
            try {
                final String result = get();
                lblMessage.setForeground(OK.equals(result) ? Color.GREEN : Color.RED);
                lblMessage.setText(OK.equals(result) ? bundle.getString("ConnectionEditor.connected") : result);                
            } catch (Exception ignore) { }
            p.finish();
        }
        
    }
    
}
